{
  "_args": [
    [
      {
        "raw": "js2xmlparser@https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
        "scope": null,
        "escapedName": "js2xmlparser",
        "name": "js2xmlparser",
        "rawSpec": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
        "spec": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
        "type": "remote"
      },
      "C:\\gitRepos\\umbraco-Pairs\\node_modules\\grunt-umbraco-package"
    ]
  ],
  "_from": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
  "_id": "js2xmlparser@1.0.0",
  "_inCache": true,
  "_location": "/js2xmlparser",
  "_phantomChildren": {},
  "_requested": {
    "raw": "js2xmlparser@https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
    "scope": null,
    "escapedName": "js2xmlparser",
    "name": "js2xmlparser",
    "rawSpec": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
    "spec": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
    "type": "remote"
  },
  "_requiredBy": [
    "/grunt-umbraco-package"
  ],
  "_resolved": "https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
  "_shasum": "91756d8ccd8b470766ace2a692bddbb5b9ad6b5d",
  "_shrinkwrap": null,
  "_spec": "js2xmlparser@https://github.com/tomfulton/node-js2xmlparser/tarball/85ad382d102a9c21c75a39e20017dd5d8e44ace2",
  "_where": "C:\\gitRepos\\umbraco-Pairs\\node_modules\\grunt-umbraco-package",
  "author": {
    "name": "Michael Kourlas",
    "email": "michael@kourlas.net"
  },
  "bugs": {
    "url": "https://github.com/michaelkourlas/node-js2xmlparser/issues"
  },
  "dependencies": {},
  "description": "Parses JavaScript objects into XML",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "homepage": "http://www.kourlas.net",
  "keywords": [
    "convert",
    "converter",
    "js",
    "json",
    "object",
    "objects",
    "parse",
    "parser",
    "xml"
  ],
  "license": "Apache-2.0",
  "main": "./lib/js2xmlparser.js",
  "name": "js2xmlparser",
  "optionalDependencies": {},
  "readme": "# js2xmlparser #\n\n## Overview ##\n\njs2xmlparser is a Node.js module that parses JavaScript objects into XML.\n\n## Features ##\n\nSince XML is a data-interchange format, js2xmlparser is designed primarily for JSON-type objects, arrays and primitive\ndata types, like many of the other JavaScript to XML parsers currently available for Node.js.\n\nHowever, js2xmlparser is capable of parsing any object, including native JavaScript objects such as Date and RegExp, by\ntaking advantage of each object's toString function. Functions are a special case where the return value of the function\nitself is used instead of the toString function, if available.\n\njs2xmlparser also supports a number of constructs unique to XML:\n\n* attributes (through a unique attribute property in objects)\n* mixed content (through a unique value property in objects)\n* multiple elements with the same name (through arrays)\n\njs2xmlparser can also pretty-print the XML it outputs with the option of customizing the indent string.\n\n## Installation ##\n\nThe easiest way to install js2xmlparser is to use npm: `npm install js2xmlparser`.\n\nAlternatively, you may download the source from GitHub and copy it to a folder named \"js2xmlparser\" within your\n\"node_modules\" directory.\n\n## Usage ##\n\nThe js2xmlparser module contains one function which takes the following arguments:\n\n* `root` - the XML root element's name (string, mandatory)\n* `data` - the data to be converted to XML; while the data object can contain arrays, it cannot itself be an array\n  unless the root element is listed in the arrayMap option (object or JSON string, mandatory)\n* `options` - module options (object, optional)\n    * `declaration` - XML declaration options (object, optional)\n        * `include` - specifies whether an XML declaration should be included (boolean, optional, default: true)\n        * `encoding` - value of XML encoding attribute in declaration; a value of null represents no encoding attribute\n          (string, optional, default: \"UTF-8\")\n    * `attributeString` - the name of the property representing an element's attributes; note that any property with a\n      name equal to the attribute string is ignored except in the context of XML attributes (string, optional, default:\n      \"@\")\n    * `valueString` - the name of the property representing an element's value; note that any property with a name equal\n      to the value string is ignored except in the context of supplying a value for a tag containing attributes (string,\n      optional, default: \"#\")\n    * `aliasString` - the name of the property representing an element's alias; the name of the containing element will\n      be replaced with the alias (string, optional, default: \"=\")\n    * `prettyPrinting` - pretty-printing options (object, optional)\n        * `enabled` - specifies whether pretty-printing is enabled (boolean, optional, default: true)\n        * `indentString` - indent string (string, optional, default: \"\\t\")\n    * `convertMap` - maps object types (as given by the `Object.prototype.toString.call` method) to functions to convert\n      those objects to a particular string representation; `*` can be used as a wildcard for all types of objects\n      (object, optional, default: {})\n    * `arrayMap` - maps the names of arrays to the names of array elements. If an array name is listed in the map,\n      the element name will be used to wrap the array and each element will be named based on the mapped name\n      (object, optional, default: {})\n    * `useCDATA` - specifies whether strings should be enclosed in CDATA tags; otherwise, illegal XML characters will\n      be escaped (boolean, optional, default: false)\n\n## Examples ##\n\nThe following example illustrates the basic usage of js2xmlparser:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\"\n    };\n\n    console.log(js2xmlparser(\"person\", data));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person>\n    >     <firstName>John</firstName>\n    >     <lastName>Smith</lastName>\n    > </person>\n\nThis is a more complex example that builds on the first:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"@\": {\n          \"type\": \"individual\"\n        },\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"dateOfBirth\": new Date(1964, 7, 26),\n        \"address\": {\n            \"@\": {\n                \"type\": \"home\"\n            },\n            \"streetAddress\": \"3212 22nd St\",\n            \"city\": \"Chicago\",\n            \"state\": \"Illinois\",\n            \"zip\": 10000\n        },\n        \"phone\": [\n            {\n                \"@\": {\n                    \"type\": \"home\"\n                },\n                \"#\": \"123-555-4567\"\n            },\n            {\n                \"@\": {\n                    \"type\": \"work\"\n                },\n                \"#\": \"789-555-4567\"\n            },\n            {\n                \"@\": {\n                    \"type\": \"cell\"\n                },\n                \"#\": \"456-555-7890\"\n            }\n        ],\n        \"email\": function() {\n            return \"john@smith.com\";\n        },\n        \"notes\": \"John's profile is not complete.\"\n    };\n\n    console.log(js2xmlparser(\"person\", data));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person type=\"individual\">\n    >     <firstName>John</firstName>\n    >     <lastName>Smith</lastName>\n    >     <dateOfBirth>Wed Aug 26 1964 00:00:00 GMT-0400 (Eastern Daylight Time)</dateOfBirth>\n    >     <address type=\"home\">\n    >         <streetAddress>3212 22nd St</streetAddress>\n    >         <city>Chicago</city>\n    >         <state>Illinois</state>\n    >         <zip>10000</zip>\n    >     </address>\n    >     <phone type=\"home\">123-555-4567</phone>\n    >     <phone type=\"work\">789-555-4567</telephone>\n    >     <phone type=\"cell\">456-555-7890</phone>\n    >     <email>john@smith.com</email>\n    >     <notes>John&apos;s profile is not complete.</notes>\n    > </person>\n\nThis example uses the alias string feature:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"telephone\": [\n            \"123-555-4567\",\n            {\n                \"#\": \"789-555-4567\",\n                \"=\": \"fax\"\n            },\n            \"456-555-7890\"\n        ]\n    };\n\n    console.log(js2xmlparser(\"person\", data));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person>\n    >     <telephone>123-555-4567</telephone>\n    >     <fax>789-555-4567</fax>\n    >     <telephone>456-555-7890</telephone>\n    > </person>\n\nThis example uses the convert map feature:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"email\": function() {\n            return \"john@smith.com\";\n        },\n        \"dateOfBirth\": new Date(1964, 7, 26)\n    }\n\n    var options = {\n        convertMap: {\n            \"[object Date]\": function(date) {\n                return date.toISOString();\n            },\n            \"[object Function]\": function(func) {\n                return func.toString();\n            }\n        }\n    };\n\n    console.log(js2xmlparser(\"person\", data, options));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person>\n    > \t  <email>function () {\n    >             return &quot;john@smith.com&quot;;\n    >         }</email>\n    > \t  <dateOfBirth>1964-08-26T05:00:00.000Z</dateOfBirth>\n    > </person>\n\nThis example uses the array map feature:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"firstName\": \"John\",\n        \"lastName\": \"Smith\",\n        \"nicknames\": [\n            \"Johnny\", \n            \"Jon\", \n            \"Jack\"\n        ]\n    }\n\n    var options = {\n        arrayMap: {\n            nicknames: \"name\"\n        }\n    };\n\n    console.log(js2xmlparser(\"person\", data, options));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person>\n    >     <firstName>John</firstName>\n    >     <lastName>Smith</lastName>\n    >     <nicknames>\n    >         <name>Johnny</name>\n    >         <name>Jon</name>\n    >         <name>Jack</name>\n    >     </nicknames>\n    > </person>\n\nThis example wraps strings in CDATA tags instead of escaping invalid characters:\n\n    var js2xmlparser = require(\"js2xmlparser\");\n\n    var data = {\n        \"notes\": {\n            \"@\": {\n                \"type\": \"status\"\n            },\n            \"#\": \"John's profile is not complete.\"\n        }\n    };\n\n    var options = {\n        useCDATA: true\n    };\n\n    console.log(js2xmlparser(\"person\", data, options));\n\n    > <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    > <person>\n    >     <notes type=\"status\"><![CDATA[John's profile is not complete.]]></notes>\n    > </person>\n\n## Tests ##\n\njs2xmlparser comes with a set of tests that evaluate and verify the package's core functionality. To run the tests:\n\n* Install the test dependencies with `npm install`.\n* Run the tests with `mocha`.\n\n## License ##\n\nj2xmlparser is licensed under the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0). Please see the \nLICENSE.md file for more information.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelkourlas/node-js2xmlparser.git"
  },
  "version": "1.0.0"
}
